{"ast":null,"code":"var _jsxFileName = \"/Users/meeqatsuharwardy/stock-data-viewer/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import Highcharts from \"highcharts/highstock\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import \"./main.css\";\n\n// function StockApp() {\n//   const [query, setQuery] = useState(\"\");\n//   const [messages, setMessages] = useState([]); // Store all chats as an array of messages\n\n//   const appendMessage = (text, type) => {\n//     setMessages((messages) => [...messages, { text, type }]);\n//   };\n\n//   const handleFormSubmit = async (event) => {\n//     event.preventDefault();\n//     appendMessage(`Query: ${query}`, \"query\"); // Append user query as a new message\n//     const formData = new URLSearchParams();\n//     formData.append(\"question\", query);\n//     try {\n//       const res = await fetch(\"http://127.0.0.1:5000/stock_data\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//         body: formData,\n//       });\n//       const result = await res.json();\n//       if (result.success) {\n//         if (result.description) {\n//           appendMessage(result.description, \"description\");\n//         }\n//         if (result.need_chart) {\n//           fetchChart(result.symbol);\n//         } else {\n//           appendMessage(`Stock Price: ${result.price}`, \"response\");\n//         }\n//       } else {\n//         appendMessage(`Error: ${result.error}`, \"error\");\n//       }\n//     } catch (error) {\n//       appendMessage(`Error sending request: ${error.message}`, \"error\");\n//     }\n//   };\n\n//   const fetchChart = async (symbol) => {\n//     try {\n//       const res = await fetch(\n//         `http://127.0.0.1:5000/stock_chart?symbol=${symbol}&period=6mo`\n//       );\n//       const data = await res.json();\n//       if (data.success) {\n//         appendMessage(\n//           \"Chart fetched successfully. Displaying below.\",\n//           \"chart-info\"\n//         );\n//         setMessages((messages) => [\n//           ...messages,\n//           {\n//             text: \"Chart data\",\n//             type: \"chart\",\n//             chartOptions: {\n//               chart: { type: \"line\" },\n//               title: { text: \"Stock Price Chart\" },\n//               xAxis: {\n//                 type: \"datetime\",\n//                 dateTimeLabelFormats: { month: \"%e. %b\", year: \"%b\" },\n//               },\n//               yAxis: { title: { text: \"Price ($)\" } },\n//               series: [\n//                 {\n//                   name: symbol,\n//                   data: data.prices.map((price, index) => [\n//                     Date.parse(data.dates[index]),\n//                     price,\n//                   ]),\n//                 },\n//               ],\n//             },\n//           },\n//         ]);\n//       } else {\n//         appendMessage(`Error fetching chart: ${data.error}`, \"error\");\n//       }\n//     } catch (error) {\n//       appendMessage(`Error sending request: ${error.message}`, \"error\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2 className=\"mt-5\">Stock Chat Query</h2>\n//       <form onSubmit={handleFormSubmit} className=\"mb-3\">\n//         <div className=\"form-group\">\n//           <label>Enter your query:</label>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             value={query}\n//             onChange={(e) => setQuery(e.target.value)}\n//             placeholder=\"E.g., What is the stock price of Apple or Draw high charts of Apple\"\n//             required\n//           />\n//         </div>\n//         <button type=\"submit\" className=\"btn btn-primary\">\n//           Submit Query\n//         </button>\n//       </form>\n//       <div>\n//         {messages.map((msg, index) =>\n//           msg.type === \"chart\" ? (\n//             <div key={index}>\n//               <HighchartsReact\n//                 highcharts={Highcharts}\n//                 constructorType={\"stockChart\"}\n//                 options={msg.chartOptions}\n//               />\n//             </div>\n//           ) : (\n//             <div\n//               key={index}\n//               className={`alert alert-${\n//                 msg.type === \"error\" ? \"danger\" : \"secondary\"\n//               } mt-3`}\n//             >\n//               {msg.text}\n//             </div>\n//           )\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default StockApp;\n\nimport React, { useState } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport ChatWindow from \"./ChatWindow\";\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./main.css\"; // Main styling for the entire app\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const appendMessage = (text, type, options = {}) => {\n    setMessages(messages => [...messages, {\n      text,\n      type,\n      ...options\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      messages: messages,\n      appendMessage: appendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Sidebar","ChatWindow","Highcharts","HighchartsReact","jsxDEV","_jsxDEV","App","_s","messages","setMessages","appendMessage","text","type","options","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/meeqatsuharwardy/stock-data-viewer/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import Highcharts from \"highcharts/highstock\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import \"./main.css\";\n\n// function StockApp() {\n//   const [query, setQuery] = useState(\"\");\n//   const [messages, setMessages] = useState([]); // Store all chats as an array of messages\n\n//   const appendMessage = (text, type) => {\n//     setMessages((messages) => [...messages, { text, type }]);\n//   };\n\n//   const handleFormSubmit = async (event) => {\n//     event.preventDefault();\n//     appendMessage(`Query: ${query}`, \"query\"); // Append user query as a new message\n//     const formData = new URLSearchParams();\n//     formData.append(\"question\", query);\n//     try {\n//       const res = await fetch(\"http://127.0.0.1:5000/stock_data\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n//         body: formData,\n//       });\n//       const result = await res.json();\n//       if (result.success) {\n//         if (result.description) {\n//           appendMessage(result.description, \"description\");\n//         }\n//         if (result.need_chart) {\n//           fetchChart(result.symbol);\n//         } else {\n//           appendMessage(`Stock Price: ${result.price}`, \"response\");\n//         }\n//       } else {\n//         appendMessage(`Error: ${result.error}`, \"error\");\n//       }\n//     } catch (error) {\n//       appendMessage(`Error sending request: ${error.message}`, \"error\");\n//     }\n//   };\n\n//   const fetchChart = async (symbol) => {\n//     try {\n//       const res = await fetch(\n//         `http://127.0.0.1:5000/stock_chart?symbol=${symbol}&period=6mo`\n//       );\n//       const data = await res.json();\n//       if (data.success) {\n//         appendMessage(\n//           \"Chart fetched successfully. Displaying below.\",\n//           \"chart-info\"\n//         );\n//         setMessages((messages) => [\n//           ...messages,\n//           {\n//             text: \"Chart data\",\n//             type: \"chart\",\n//             chartOptions: {\n//               chart: { type: \"line\" },\n//               title: { text: \"Stock Price Chart\" },\n//               xAxis: {\n//                 type: \"datetime\",\n//                 dateTimeLabelFormats: { month: \"%e. %b\", year: \"%b\" },\n//               },\n//               yAxis: { title: { text: \"Price ($)\" } },\n//               series: [\n//                 {\n//                   name: symbol,\n//                   data: data.prices.map((price, index) => [\n//                     Date.parse(data.dates[index]),\n//                     price,\n//                   ]),\n//                 },\n//               ],\n//             },\n//           },\n//         ]);\n//       } else {\n//         appendMessage(`Error fetching chart: ${data.error}`, \"error\");\n//       }\n//     } catch (error) {\n//       appendMessage(`Error sending request: ${error.message}`, \"error\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2 className=\"mt-5\">Stock Chat Query</h2>\n//       <form onSubmit={handleFormSubmit} className=\"mb-3\">\n//         <div className=\"form-group\">\n//           <label>Enter your query:</label>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             value={query}\n//             onChange={(e) => setQuery(e.target.value)}\n//             placeholder=\"E.g., What is the stock price of Apple or Draw high charts of Apple\"\n//             required\n//           />\n//         </div>\n//         <button type=\"submit\" className=\"btn btn-primary\">\n//           Submit Query\n//         </button>\n//       </form>\n//       <div>\n//         {messages.map((msg, index) =>\n//           msg.type === \"chart\" ? (\n//             <div key={index}>\n//               <HighchartsReact\n//                 highcharts={Highcharts}\n//                 constructorType={\"stockChart\"}\n//                 options={msg.chartOptions}\n//               />\n//             </div>\n//           ) : (\n//             <div\n//               key={index}\n//               className={`alert alert-${\n//                 msg.type === \"error\" ? \"danger\" : \"secondary\"\n//               } mt-3`}\n//             >\n//               {msg.text}\n//             </div>\n//           )\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default StockApp;\n\nimport React, { useState } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport ChatWindow from \"./ChatWindow\";\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./main.css\"; // Main styling for the entire app\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n\n  const appendMessage = (text, type, options = {}) => {\n    setMessages((messages) => [...messages, { text, type, ...options }]);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <Sidebar />\n      <ChatWindow messages={messages} appendMessage={appendMessage} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,UAAU,MAAM,sBAAsB;AAC7C,OAAOC,eAAe,MAAM,2BAA2B;AACvD,OAAO,sCAAsC;AAC7C,OAAO,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMW,aAAa,GAAGA,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAClDJ,WAAW,CAAED,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAE;MAAEG,IAAI;MAAEC,IAAI;MAAE,GAAGC;IAAQ,CAAC,CAAC,CAAC;EACtE,CAAC;EAED,oBACER,OAAA;IAAKS,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BV,OAAA,CAACL,OAAO;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACXd,OAAA,CAACJ,UAAU;MAACO,QAAQ,EAAEA,QAAS;MAACE,aAAa,EAAEA;IAAc;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEV;AAACZ,EAAA,CAbQD,GAAG;AAAAc,EAAA,GAAHd,GAAG;AAeZ,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}