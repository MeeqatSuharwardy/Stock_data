{"ast":null,"code":"var _jsxFileName = \"/Users/meeqatsuharwardy/stock-data-viewer/src/ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport \"./main.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StockApp() {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const appendMessage = (text, type, options = {}) => {\n    setMessages(messages => [...messages, {\n      text,\n      type,\n      ...options\n    }]);\n  };\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    if (query.trim() !== \"\") {\n      appendMessage(query, \"user\");\n      const formData = new URLSearchParams();\n      formData.append(\"question\", query);\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/stock_data\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: formData\n        });\n        const result = await response.json();\n        if (result.success) {\n          if (result.need_chart) {\n            // Append the description provided by the backend to the chat.\n            appendMessage({\n              text: result.description,\n              type: \"system\"\n            });\n            // Fetch and display the chart.\n            fetchChart(result.symbol);\n          } else {\n            // If a chart isn't needed, just display the stock price.\n            appendMessage({\n              text: `The stock price of ${result.symbol} is ${result.price}.`,\n              type: \"system\"\n            });\n          }\n        } else {\n          appendMessage({\n            text: `Error: ${result.error}`,\n            type: \"error\"\n          });\n        }\n      } catch (error) {\n        appendMessage({\n          text: `Network Error: ${error.message}`,\n          type: \"error\"\n        });\n      }\n      setQuery(\"\"); // Clear the input field\n    }\n  };\n  const fetchChart = async symbol => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/stock_chart?symbol=${symbol}&period=6mo`);\n      const data = await response.json();\n      if (data.success) {\n        // The chart is now part of the messages state, so it will render inline with other messages.\n        appendMessage(\"\", \"chart\", {\n          chartOptions: {\n            chart: {\n              type: \"line\",\n              backgroundColor: \"#11161C\"\n            },\n            title: {\n              text: \"Stock Price Chart\"\n            },\n            xAxis: {\n              type: \"datetime\",\n              dateTimeLabelFormats: {\n                month: \"%e. %b\",\n                year: \"%b\"\n              }\n            },\n            yAxis: {\n              title: {\n                text: \"Price ($)\"\n              }\n            },\n            series: [{\n              name: symbol,\n              data: data.prices.map((price, index) => [Date.parse(data.dates[index]), price])\n            }]\n          }\n        });\n      } else {\n        appendMessage(`Error fetching chart: ${data.error}`, \"error\");\n      }\n    } catch (error) {\n      appendMessage(`Network Error: ${error.message}`, \"error\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-display-area\",\n      children: messages.map((msg, index) => {\n        if (msg.type === \"chart\" && msg.chartOptions) {\n          // Render chart and its accompanying description\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [msg.description && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message system-message\",\n              children: msg.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message chart-message\",\n              children: /*#__PURE__*/_jsxDEV(HighchartsReact, {\n                highcharts: Highcharts,\n                constructorType: \"stockChart\",\n                options: msg.chartOptions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this);\n        } else {\n          // Render normal messages\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.type}-message`,\n            children: msg.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"text-input\",\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        placeholder: \"Enter stock query (e.g., Apple stock price)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleFormSubmit,\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(StockApp, \"8yH7+QJkqqDtC5K0qsGO5dDQIQY=\");\n_c = StockApp;\nexport default StockApp;\nvar _c;\n$RefreshReg$(_c, \"StockApp\");","map":{"version":3,"names":["React","useState","Highcharts","HighchartsReact","jsxDEV","_jsxDEV","StockApp","_s","query","setQuery","messages","setMessages","appendMessage","text","type","options","handleFormSubmit","event","preventDefault","trim","formData","URLSearchParams","append","response","fetch","method","headers","body","result","json","success","need_chart","description","fetchChart","symbol","price","error","message","data","chartOptions","chart","backgroundColor","title","xAxis","dateTimeLabelFormats","month","year","yAxis","series","name","prices","map","index","Date","parse","dates","className","children","msg","Fragment","fileName","_jsxFileName","lineNumber","columnNumber","highcharts","constructorType","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/meeqatsuharwardy/stock-data-viewer/src/ChatWindow.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport \"./main.css\";\n\nfunction StockApp() {\n  const [query, setQuery] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  const appendMessage = (text, type, options = {}) => {\n    setMessages((messages) => [...messages, { text, type, ...options }]);\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    if (query.trim() !== \"\") {\n      appendMessage(query, \"user\");\n      const formData = new URLSearchParams();\n      formData.append(\"question\", query);\n\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/stock_data\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n          body: formData,\n        });\n        const result = await response.json();\n        if (result.success) {\n          if (result.need_chart) {\n            // Append the description provided by the backend to the chat.\n            appendMessage({ text: result.description, type: \"system\" });\n            // Fetch and display the chart.\n            fetchChart(result.symbol);\n          } else {\n            // If a chart isn't needed, just display the stock price.\n            appendMessage({\n              text: `The stock price of ${result.symbol} is ${result.price}.`,\n              type: \"system\",\n            });\n          }\n        } else {\n          appendMessage({ text: `Error: ${result.error}`, type: \"error\" });\n        }\n      } catch (error) {\n        appendMessage({\n          text: `Network Error: ${error.message}`,\n          type: \"error\",\n        });\n      }\n      setQuery(\"\"); // Clear the input field\n    }\n  };\n\n  const fetchChart = async (symbol) => {\n    try {\n      const response = await fetch(\n        `http://127.0.0.1:5000/stock_chart?symbol=${symbol}&period=6mo`\n      );\n      const data = await response.json();\n      if (data.success) {\n        // The chart is now part of the messages state, so it will render inline with other messages.\n        appendMessage(\"\", \"chart\", {\n          chartOptions: {\n            chart: { type: \"line\", backgroundColor: \"#11161C\" },\n            title: { text: \"Stock Price Chart\" },\n            xAxis: {\n              type: \"datetime\",\n              dateTimeLabelFormats: { month: \"%e. %b\", year: \"%b\" },\n            },\n            yAxis: { title: { text: \"Price ($)\" } },\n            series: [\n              {\n                name: symbol,\n                data: data.prices.map((price, index) => [\n                  Date.parse(data.dates[index]),\n                  price,\n                ]),\n              },\n            ],\n          },\n        });\n      } else {\n        appendMessage(`Error fetching chart: ${data.error}`, \"error\");\n      }\n    } catch (error) {\n      appendMessage(`Network Error: ${error.message}`, \"error\");\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"message-display-area\">\n        {messages.map((msg, index) => {\n          if (msg.type === \"chart\" && msg.chartOptions) {\n            // Render chart and its accompanying description\n            return (\n              <React.Fragment key={index}>\n                {msg.description && (\n                  <div className=\"message system-message\">\n                    {msg.description}\n                  </div>\n                )}\n                <div className=\"message chart-message\">\n                  <HighchartsReact\n                    highcharts={Highcharts}\n                    constructorType={\"stockChart\"}\n                    options={msg.chartOptions}\n                  />\n                </div>\n              </React.Fragment>\n            );\n          } else {\n            // Render normal messages\n            return (\n              <div key={index} className={`message ${msg.type}-message`}>\n                {msg.text}\n              </div>\n            );\n          }\n        })}\n      </div>\n      <div className=\"input-area\">\n        <input\n          type=\"text\"\n          className=\"text-input\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder=\"Enter stock query (e.g., Apple stock price)\"\n        />\n        <button\n          type=\"button\"\n          onClick={handleFormSubmit}\n          className=\"send-button\"\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default StockApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}