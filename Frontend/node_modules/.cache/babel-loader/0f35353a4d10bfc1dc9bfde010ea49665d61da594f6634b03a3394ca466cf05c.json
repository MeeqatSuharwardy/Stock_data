{"ast":null,"code":"var _jsxFileName = \"/Users/meeqatsuharwardy/stock-data-viewer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StockApp() {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const [showChartOptions, setShowChartOptions] = useState(false);\n  const [chartData, setChartData] = useState(null);\n  const [chartType, setChartType] = useState(\"line\");\n  const [timePeriod, setTimePeriod] = useState(\"3\");\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const data = {\n      question: query\n    };\n    try {\n      let response = await fetch(\"http://127.0.0.1:5000/stock_data\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: new URLSearchParams(data)\n      });\n      const result = await response.json();\n      if (result.success) {\n        if (result.need_chart) {\n          setShowChartOptions(true);\n          fetchChart(result.symbol);\n        } else {\n          setShowChartOptions(false);\n          setResponse(`Stock Price: ${result.price}`);\n        }\n      } else {\n        setResponse(`Error: ${result.error}`);\n      }\n    } catch (error) {\n      setResponse(`Error sending request: ${error.message}`);\n    }\n  };\n  const fetchChart = async symbol => {\n    try {\n      let response = await fetch(`/stock_chart?symbol=${symbol}&period=${timePeriod}mo`);\n      const data = await response.json();\n      if (data.success) {\n        setChartData({\n          chart: {\n            type: chartType\n          },\n          title: {\n            text: \"Stock Price Chart\"\n          },\n          xAxis: {\n            type: \"datetime\",\n            dateTimeLabelFormats: {\n              month: \"%e. %b\",\n              year: \"%b\"\n            }\n          },\n          yAxis: {\n            title: {\n              text: \"Price ($)\"\n            }\n          },\n          series: [{\n            name: symbol,\n            data: prepareChartData(data, chartType)\n          }]\n        });\n      } else {\n        alert(\"Error: \" + data.error);\n      }\n    } catch (error) {\n      alert(\"Error sending request: \" + error.message);\n    }\n  };\n  const prepareChartData = (data, type) => {\n    return type === \"line\" ? data.prices.map((price, index) => [data.dates[index], price]) : data.prices.map((price, index) => {\n      // Simulating OHLC data for candlestick\n      const open = price - Math.random() * 10;\n      const high = price + Math.random() * 10;\n      const low = price - Math.random() * 15;\n      const close = price + Math.random() * 5;\n      return [Date.parse(data.dates[index]), open, high, low, close];\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mt-5\",\n      children: \"Stock Chart Query\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFormSubmit,\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Enter your query:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          value: query,\n          onChange: e => setQuery(e.target.value),\n          placeholder: \"E.g., What is the stock price of Apple or Draw high charts of Apple\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Get Stock Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), response && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-info mt-3\",\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 20\n    }, this), showChartOptions && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Choose chart type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-control\",\n          value: chartType,\n          onChange: e => setChartType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"line\",\n            children: \"Line Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"candlestick\",\n            children: \"Candlestick Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"12\",\n        value: timePeriod,\n        onChange: e => setTimePeriod(e.target.value),\n        className: \"slider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), chartData && /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      constructorType: \"stockChart\",\n      options: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(StockApp, \"7MsA/buxQao4nnzczHIW5NXQArs=\");\n_c = StockApp;\nexport default StockApp;\nvar _c;\n$RefreshReg$(_c, \"StockApp\");","map":{"version":3,"names":["React","useState","Highcharts","HighchartsReact","jsxDEV","_jsxDEV","StockApp","_s","query","setQuery","response","setResponse","showChartOptions","setShowChartOptions","chartData","setChartData","chartType","setChartType","timePeriod","setTimePeriod","handleFormSubmit","event","preventDefault","data","question","fetch","method","headers","body","URLSearchParams","result","json","success","need_chart","fetchChart","symbol","price","error","message","chart","type","title","text","xAxis","dateTimeLabelFormats","month","year","yAxis","series","name","prepareChartData","alert","prices","map","index","dates","open","Math","random","high","low","close","Date","parse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","e","target","placeholder","required","min","max","highcharts","constructorType","options","_c","$RefreshReg$"],"sources":["/Users/meeqatsuharwardy/stock-data-viewer/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction StockApp() {\n  const [query, setQuery] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const [showChartOptions, setShowChartOptions] = useState(false);\n  const [chartData, setChartData] = useState(null);\n  const [chartType, setChartType] = useState(\"line\");\n  const [timePeriod, setTimePeriod] = useState(\"3\");\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const data = { question: query };\n    try {\n      let response = await fetch(\"http://127.0.0.1:5000/stock_data\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        body: new URLSearchParams(data),\n      });\n      const result = await response.json();\n      if (result.success) {\n        if (result.need_chart) {\n          setShowChartOptions(true);\n          fetchChart(result.symbol);\n        } else {\n          setShowChartOptions(false);\n          setResponse(`Stock Price: ${result.price}`);\n        }\n      } else {\n        setResponse(`Error: ${result.error}`);\n      }\n    } catch (error) {\n      setResponse(`Error sending request: ${error.message}`);\n    }\n  };\n\n  const fetchChart = async (symbol) => {\n    try {\n      let response = await fetch(\n        `/stock_chart?symbol=${symbol}&period=${timePeriod}mo`\n      );\n      const data = await response.json();\n      if (data.success) {\n        setChartData({\n          chart: { type: chartType },\n          title: { text: \"Stock Price Chart\" },\n          xAxis: {\n            type: \"datetime\",\n            dateTimeLabelFormats: { month: \"%e. %b\", year: \"%b\" },\n          },\n          yAxis: { title: { text: \"Price ($)\" } },\n          series: [{ name: symbol, data: prepareChartData(data, chartType) }],\n        });\n      } else {\n        alert(\"Error: \" + data.error);\n      }\n    } catch (error) {\n      alert(\"Error sending request: \" + error.message);\n    }\n  };\n\n  const prepareChartData = (data, type) => {\n    return type === \"line\"\n      ? data.prices.map((price, index) => [data.dates[index], price])\n      : data.prices.map((price, index) => {\n          // Simulating OHLC data for candlestick\n          const open = price - Math.random() * 10;\n          const high = price + Math.random() * 10;\n          const low = price - Math.random() * 15;\n          const close = price + Math.random() * 5;\n          return [Date.parse(data.dates[index]), open, high, low, close];\n        });\n  };\n\n  return (\n    <div className=\"container\">\n      <h2 className=\"mt-5\">Stock Chart Query</h2>\n      <form onSubmit={handleFormSubmit} className=\"mb-3\">\n        <div className=\"form-group\">\n          <label>Enter your query:</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            placeholder=\"E.g., What is the stock price of Apple or Draw high charts of Apple\"\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Get Stock Data\n        </button>\n      </form>\n      {response && <div className=\"alert alert-info mt-3\">{response}</div>}\n      {showChartOptions && (\n        <div>\n          <div className=\"form-group\">\n            <label>Choose chart type:</label>\n            <select\n              className=\"form-control\"\n              value={chartType}\n              onChange={(e) => setChartType(e.target.value)}\n            >\n              <option value=\"line\">Line Chart</option>\n              <option value=\"candlestick\">Candlestick Chart</option>\n            </select>\n          </div>\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"12\"\n            value={timePeriod}\n            onChange={(e) => setTimePeriod(e.target.value)}\n            className=\"slider\"\n          />\n        </div>\n      )}\n      {chartData && (\n        <HighchartsReact\n          highcharts={Highcharts}\n          constructorType={\"stockChart\"}\n          options={chartData}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default StockApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}